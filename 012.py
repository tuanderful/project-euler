# Highly divisible triangular number
# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
#  ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# Answer:
# 76576500

import math

# Can we optimize this by only checking up to m/3? m/4??
def countDivisors(m):
  halfM = int(math.ceil(m/2))
  divisors = [1, m]

  if(m % 2 == 0):
    divisors.append(2)

  for i in range(3, halfM + 1):
    if (m % i == 0):
      divisors.append(i)

  return len(divisors)


# ------------------------------------------------------------------------------
# Generate triangle numbers, and as each one is found, count the divisors
def problem_012():
  #countDivisors(120)


  triangles = []
  runningSum = 0
  divisorCt = 0
  i = 0

  while divisorCt < 500:
    runningSum += i
    divisorCt = countDivisors(runningSum)
    i += 1

    #triangles.append(runningSum)
    #print `i` + ": " + `runningSum`

  print runningSum

# ------------------------------------------------------------------------------
# Execute standalone
problem_012()


