# Highly divisible triangular number
# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
#  ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# Answer:
# 76576500

TRIANGLES = [0, 1]


# ------------------------------------------------------------------------------
# countDivisors(8654880) runs in 0.7s
def countDivisors(n):
  if n == 1:
    return 1

  halfN = n/2
  divisors = 2   # divisible by 1 and itself

  for i in range(2, halfN+1):
    if(n%i == 0):
      divisors += 1

  return divisors


# ------------------------------------------------------------------------------
def triangle(n):
  # If we already have a value calculated
  if n < len(TRIANGLES):
    return TRIANGLES[n]

  # If not already calculated, then calc and return
  # First, check if the immediately previous triangle has been calc.
  if (n-1) < len(TRIANGLES):
    lastTriangle = TRIANGLES[n-1]
  else:
    lastTriangle = triangle(n-1)

  thisTriangle = n + lastTriangle
  TRIANGLES.append(thisTriangle)

  return thisTriangle;


# ------------------------------------------------------------------------------
def problem_012():

  answerFound = False
  i = 1

  while answerFound != True:
    thisTriangle = triangle(i)
    divisors = countDivisors(thisTriangle)

    if (divisors > 500):
      print `i` + ": " + `thisTriangle` + " has " + `divisors` + " divisors."
      answerFound = True

    else:
      i += 1


# ------------------------------------------------------------------------------
# Execute standalone
problem_012()



